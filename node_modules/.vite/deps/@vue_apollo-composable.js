import {
  computed,
  getCurrentInstance,
  inject,
  isRef,
  nextTick,
  onBeforeUnmount,
  onServerPrefetch,
  onUnmounted,
  reactive,
  ref,
  watch
} from "./chunk-2FDUVFJ5.js";
import "./chunk-Y2F7D3TJ.js";

// node_modules/throttle-debounce/index.esm.js
function throttle(delay, noTrailing, callback, debounceMode) {
  var timeoutID;
  var cancelled = false;
  var lastExec = 0;
  function clearExistingTimeout() {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
  }
  function cancel() {
    clearExistingTimeout();
    cancelled = true;
  }
  if (typeof noTrailing !== "boolean") {
    debounceMode = callback;
    callback = noTrailing;
    noTrailing = void 0;
  }
  function wrapper() {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }
    var self = this;
    var elapsed = Date.now() - lastExec;
    if (cancelled) {
      return;
    }
    function exec() {
      lastExec = Date.now();
      callback.apply(self, arguments_);
    }
    function clear() {
      timeoutID = void 0;
    }
    if (debounceMode && !timeoutID) {
      exec();
    }
    clearExistingTimeout();
    if (debounceMode === void 0 && elapsed > delay) {
      exec();
    } else if (noTrailing !== true) {
      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
    }
  }
  wrapper.cancel = cancel;
  return wrapper;
}
function debounce(delay, atBegin, callback) {
  return callback === void 0 ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
}

// node_modules/@vue/apollo-composable/dist/useApolloClient.js
var DefaultApolloClient = Symbol("default-apollo-client");
var ApolloClients = Symbol("apollo-clients");
function resolveDefaultClient(providedApolloClients, providedApolloClient) {
  var resolvedClient = providedApolloClients ? providedApolloClients.default : providedApolloClient;
  return resolvedClient;
}
function resolveClientWithId(providedApolloClients, clientId) {
  if (!providedApolloClients) {
    throw new Error("No apolloClients injection found, tried to resolve '" + clientId + "' clientId");
  }
  return providedApolloClients[clientId];
}
function useApolloClient(clientId) {
  var resolveImpl;
  if (!getCurrentInstance()) {
    resolveImpl = function() {
      return currentApolloClient;
    };
  } else {
    var providedApolloClients_1 = inject(ApolloClients, null);
    var providedApolloClient_1 = inject(DefaultApolloClient, null);
    resolveImpl = function(id) {
      if (currentApolloClient) {
        return currentApolloClient;
      } else if (id) {
        return resolveClientWithId(providedApolloClients_1, id);
      }
      return resolveDefaultClient(providedApolloClients_1, providedApolloClient_1);
    };
  }
  function resolveClient(id) {
    if (id === void 0) {
      id = clientId;
    }
    var client = resolveImpl(id);
    if (!client) {
      throw new Error("Apollo client with id " + (id || "default") + " not found. Use provideApolloClient() if you are outside of a component setup.");
    }
    return client;
  }
  return {
    resolveClient,
    get client() {
      return resolveClient();
    }
  };
}
var currentApolloClient;
function provideApolloClient(client) {
  currentApolloClient = client;
  return function(fn) {
    var result = fn();
    currentApolloClient = null;
    return result;
  };
}

// node_modules/@vue/apollo-composable/dist/util/paramToRef.js
function paramToRef(param) {
  if (isRef(param)) {
    return param;
  } else if (typeof param === "function") {
    return computed(param);
  } else {
    return ref(param);
  }
}

// node_modules/@vue/apollo-composable/dist/util/paramToReactive.js
function paramToReactive(param) {
  if (isRef(param)) {
    return param;
  } else if (typeof param === "function") {
    return computed(param);
  } else if (param) {
    return reactive(param);
  } else {
    return param;
  }
}

// node_modules/@vue/apollo-composable/dist/util/useEventHook.js
function useEventHook() {
  var fns = [];
  function on(fn) {
    fns.push(fn);
    return {
      off: function() {
        return off(fn);
      }
    };
  }
  function off(fn) {
    var index = fns.indexOf(fn);
    if (index !== -1) {
      fns.splice(index, 1);
    }
  }
  function trigger(param) {
    for (var _i = 0, fns_1 = fns; _i < fns_1.length; _i++) {
      var fn = fns_1[_i];
      fn(param);
    }
  }
  return {
    on,
    off,
    trigger
  };
}

// node_modules/@vue/apollo-composable/dist/util/loadingTracking.js
function getAppTracking() {
  var vm = getCurrentInstance();
  var root = vm.$root || vm.root;
  var appTracking;
  if (!root._apolloAppTracking) {
    appTracking = root._apolloAppTracking = {
      queries: ref(0),
      mutations: ref(0),
      subscriptions: ref(0),
      components: /* @__PURE__ */ new Map()
    };
  } else {
    appTracking = root._apolloAppTracking;
  }
  return {
    appTracking
  };
}
function getCurrentTracking() {
  var vm = getCurrentInstance();
  if (!vm) {
    throw new Error("getCurrentTracking must be used during a component setup");
  }
  var appTracking = getAppTracking().appTracking;
  var tracking;
  if (!appTracking.components.has(vm)) {
    appTracking.components.set(vm, tracking = {
      queries: ref(0),
      mutations: ref(0),
      subscriptions: ref(0)
    });
    onUnmounted(function() {
      appTracking.components.delete(vm);
    });
  } else {
    tracking = appTracking.components.get(vm);
  }
  return {
    appTracking,
    tracking
  };
}
function track(loading, type) {
  var _a = getCurrentTracking(), appTracking = _a.appTracking, tracking = _a.tracking;
  watch(loading, function(value, oldValue) {
    if (oldValue != null && value !== oldValue) {
      var mod = value ? 1 : -1;
      tracking[type].value += mod;
      appTracking[type].value += mod;
    }
  }, {
    immediate: true
  });
  onBeforeUnmount(function() {
    if (loading.value) {
      tracking[type].value--;
      appTracking[type].value--;
    }
  });
}
function trackQuery(loading) {
  track(loading, "queries");
}
function trackMutation(loading) {
  track(loading, "mutations");
}
function trackSubscription(loading) {
  track(loading, "subscriptions");
}

// node_modules/@vue/apollo-composable/dist/useQuery.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function useQuery(document, variables, options) {
  return useQueryImpl(document, variables, options);
}
function useQueryImpl(document, variables, options, lazy) {
  if (lazy === void 0) {
    lazy = false;
  }
  var vm = getCurrentInstance();
  var isServer = vm === null || vm === void 0 ? void 0 : vm.$isServer;
  if (variables == null)
    variables = ref();
  if (options == null)
    options = {};
  var documentRef = paramToRef(document);
  var variablesRef = paramToRef(variables);
  var optionsRef = paramToReactive(options);
  var result = ref();
  var resultEvent = useEventHook();
  var error = ref(null);
  var errorEvent = useEventHook();
  var loading = ref(false);
  vm && trackQuery(loading);
  var networkStatus = ref();
  var firstResolve;
  var firstReject;
  onServerPrefetch === null || onServerPrefetch === void 0 ? void 0 : onServerPrefetch(function() {
    if (!isEnabled.value || isServer && currentOptions.value.prefetch === false)
      return;
    return new Promise(function(resolve, reject) {
      firstResolve = function() {
        resolve();
        firstResolve = void 0;
        firstReject = void 0;
      };
      firstReject = function(error2) {
        reject(error2);
        firstResolve = void 0;
        firstReject = void 0;
      };
    }).then(stop).catch(stop);
  });
  var resolveClient = useApolloClient().resolveClient;
  var query = ref();
  var observer;
  var started = false;
  function start() {
    if (started || !isEnabled.value || isServer && currentOptions.value.prefetch === false) {
      if (firstResolve)
        firstResolve();
      return;
    }
    started = true;
    loading.value = true;
    var client = resolveClient(currentOptions.value.clientId);
    query.value = client.watchQuery(__assign(__assign({ query: currentDocument, variables: currentVariables }, currentOptions.value), isServer ? {
      fetchPolicy: "network-only"
    } : {}));
    startQuerySubscription();
    if (!isServer && (currentOptions.value.fetchPolicy !== "no-cache" || currentOptions.value.notifyOnNetworkStatusChange)) {
      var currentResult = query.value.getCurrentResult();
      if (!currentResult.loading || currentOptions.value.notifyOnNetworkStatusChange) {
        onNextResult(currentResult);
      }
    }
    if (!isServer) {
      for (var _i = 0, subscribeToMoreItems_1 = subscribeToMoreItems; _i < subscribeToMoreItems_1.length; _i++) {
        var item = subscribeToMoreItems_1[_i];
        addSubscribeToMore(item);
      }
    }
  }
  function startQuerySubscription() {
    if (observer && !observer.closed)
      return;
    if (!query.value)
      return;
    observer = query.value.subscribe({
      next: onNextResult,
      error: onError
    });
  }
  function onNextResult(queryResult) {
    var _a;
    processNextResult(queryResult);
    if ((_a = queryResult.errors) === null || _a === void 0 ? void 0 : _a.length) {
      var e = new Error("GraphQL error: " + queryResult.errors.map(function(e2) {
        return e2.message;
      }).join(" | "));
      Object.assign(e, {
        graphQLErrors: queryResult.errors,
        networkError: null
      });
      processError(e);
    } else {
      if (firstResolve) {
        firstResolve();
        stop();
      }
    }
  }
  function processNextResult(queryResult) {
    result.value = queryResult.data && Object.keys(queryResult.data).length === 0 ? null : queryResult.data;
    loading.value = queryResult.loading;
    networkStatus.value = queryResult.networkStatus;
    resultEvent.trigger(queryResult);
  }
  function onError(queryError) {
    processNextResult(query.value.getCurrentResult());
    processError(queryError);
    if (firstReject) {
      firstReject(queryError);
      stop();
    }
    resubscribeToQuery();
  }
  function processError(queryError) {
    error.value = queryError;
    loading.value = false;
    networkStatus.value = 8;
    errorEvent.trigger(queryError);
  }
  function resubscribeToQuery() {
    if (!query.value)
      return;
    var lastError = query.value.getLastError();
    var lastResult = query.value.getLastResult();
    query.value.resetLastResults();
    startQuerySubscription();
    Object.assign(query.value, { lastError, lastResult });
  }
  var onStopHandlers = [];
  function stop() {
    if (firstResolve)
      firstResolve();
    if (!started)
      return;
    started = false;
    loading.value = false;
    onStopHandlers.forEach(function(handler) {
      return handler();
    });
    onStopHandlers = [];
    if (query.value) {
      query.value.stopPolling();
      query.value = null;
    }
    if (observer) {
      observer.unsubscribe();
      observer = null;
    }
  }
  var restarting = false;
  function baseRestart() {
    if (!started || restarting)
      return;
    restarting = true;
    nextTick(function() {
      if (started) {
        stop();
        start();
      }
      restarting = false;
    });
  }
  var debouncedRestart;
  var isRestartDebounceSetup = false;
  function updateRestartFn() {
    if (!currentOptions) {
      debouncedRestart = baseRestart;
    } else {
      if (currentOptions.value.throttle) {
        debouncedRestart = throttle(currentOptions.value.throttle, baseRestart);
      } else if (currentOptions.value.debounce) {
        debouncedRestart = debounce(currentOptions.value.debounce, baseRestart);
      } else {
        debouncedRestart = baseRestart;
      }
      isRestartDebounceSetup = true;
    }
  }
  function restart() {
    if (!isRestartDebounceSetup)
      updateRestartFn();
    debouncedRestart();
  }
  var currentDocument;
  watch(documentRef, function(value) {
    currentDocument = value;
    restart();
  }, {
    immediate: true
  });
  var currentVariables;
  var currentVariablesSerialized;
  watch(variablesRef, function(value, oldValue) {
    var serialized = JSON.stringify(value);
    if (serialized !== currentVariablesSerialized) {
      currentVariables = value;
      restart();
    }
    currentVariablesSerialized = serialized;
  }, {
    deep: true,
    immediate: true
  });
  var currentOptions = ref();
  watch(function() {
    return isRef(optionsRef) ? optionsRef.value : optionsRef;
  }, function(value) {
    if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) {
      updateRestartFn();
    }
    currentOptions.value = value;
    restart();
  }, {
    deep: true,
    immediate: true
  });
  function refetch(variables2) {
    if (variables2 === void 0) {
      variables2 = null;
    }
    if (query.value) {
      if (variables2) {
        currentVariables = variables2;
      }
      return query.value.refetch(variables2);
    }
  }
  function fetchMore(options2) {
    if (query.value) {
      return query.value.fetchMore(options2);
    }
  }
  var subscribeToMoreItems = [];
  function subscribeToMore(options2) {
    if (isServer)
      return;
    var optionsRef2 = paramToRef(options2);
    watch(optionsRef2, function(value, oldValue, onCleanup) {
      var index = subscribeToMoreItems.findIndex(function(item2) {
        return item2.options === oldValue;
      });
      if (index !== -1) {
        subscribeToMoreItems.splice(index, 1);
      }
      var item = {
        options: value,
        unsubscribeFns: []
      };
      subscribeToMoreItems.push(item);
      addSubscribeToMore(item);
      onCleanup(function() {
        item.unsubscribeFns.forEach(function(fn) {
          return fn();
        });
        item.unsubscribeFns = [];
      });
    }, {
      immediate: true
    });
  }
  function addSubscribeToMore(item) {
    if (!started)
      return;
    var unsubscribe = query.value.subscribeToMore(item.options);
    onStopHandlers.push(unsubscribe);
    item.unsubscribeFns.push(unsubscribe);
  }
  var forceDisabled = ref(lazy);
  var enabledOption = computed(function() {
    return !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled;
  });
  var isEnabled = computed(function() {
    return enabledOption.value && !forceDisabled.value;
  });
  watch(isEnabled, function(value) {
    if (value) {
      start();
    } else {
      stop();
    }
  }, {
    immediate: true
  });
  vm && onBeforeUnmount(function() {
    stop();
    subscribeToMoreItems.length = 0;
  });
  return {
    result,
    loading,
    networkStatus,
    error,
    start,
    stop,
    restart,
    forceDisabled,
    document: documentRef,
    variables: variablesRef,
    options: optionsRef,
    query,
    refetch,
    fetchMore,
    subscribeToMore,
    onResult: resultEvent.on,
    onError: errorEvent.on
  };
}

// node_modules/@vue/apollo-composable/dist/useLazyQuery.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function useLazyQuery(document, variables, options) {
  var query = useQueryImpl(document, variables, options, true);
  function load(document2, variables2, options2) {
    if (document2) {
      query.document.value = document2;
    }
    if (variables2) {
      query.variables.value = variables2;
    }
    if (options2) {
      Object.assign(isRef(query.options) ? query.options.value : query.options, options2);
    }
    query.forceDisabled.value = false;
  }
  return __assign2(__assign2({}, query), { load });
}

// node_modules/@vue/apollo-composable/dist/useMutation.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
function useMutation(document, options) {
  if (!options)
    options = {};
  var loading = ref(false);
  trackMutation(loading);
  var error = ref(null);
  var called = ref(false);
  var doneEvent = useEventHook();
  var errorEvent = useEventHook();
  var resolveClient = useApolloClient().resolveClient;
  function mutate(variables, overrideOptions) {
    if (overrideOptions === void 0) {
      overrideOptions = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      var currentDocument, currentOptions, client, result, e_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (typeof document === "function") {
              currentDocument = document();
            } else if (isRef(document)) {
              currentDocument = document.value;
            } else {
              currentDocument = document;
            }
            if (typeof options === "function") {
              currentOptions = options();
            } else if (isRef(options)) {
              currentOptions = options.value;
            } else {
              currentOptions = options;
            }
            client = resolveClient(currentOptions.clientId);
            error.value = null;
            loading.value = true;
            called.value = true;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4, client.mutate(__assign3(__assign3(__assign3({ mutation: currentDocument }, currentOptions), overrideOptions), { variables: __assign3(__assign3({}, currentOptions.variables || {}), variables || {}) }))];
          case 2:
            result = _a.sent();
            loading.value = false;
            doneEvent.trigger(result);
            return [2, result];
          case 3:
            e_1 = _a.sent();
            error.value = e_1;
            loading.value = false;
            errorEvent.trigger(e_1);
            throw e_1;
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }
  onBeforeUnmount(function() {
    loading.value = false;
  });
  return {
    mutate,
    loading,
    error,
    called,
    onDone: doneEvent.on,
    onError: errorEvent.on
  };
}

// node_modules/@vue/apollo-composable/dist/useSubscription.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function useSubscription(document, variables, options) {
  if (variables === void 0) {
    variables = null;
  }
  if (options === void 0) {
    options = null;
  }
  var vm = getCurrentInstance();
  var isServer = vm === null || vm === void 0 ? void 0 : vm.$isServer;
  if (variables == null)
    variables = ref();
  if (!options)
    options = {};
  var documentRef = paramToRef(document);
  var variablesRef = paramToRef(variables);
  var optionsRef = paramToReactive(options);
  var result = ref();
  var resultEvent = useEventHook();
  var error = ref(null);
  var errorEvent = useEventHook();
  var loading = ref(false);
  trackSubscription(loading);
  var resolveClient = useApolloClient().resolveClient;
  var subscription = ref();
  var observer;
  var started = false;
  function start() {
    if (started || !isEnabled.value || isServer)
      return;
    started = true;
    loading.value = true;
    var client = resolveClient(currentOptions.value.clientId);
    subscription.value = client.subscribe(__assign4({ query: currentDocument, variables: currentVariables }, currentOptions.value));
    observer = subscription.value.subscribe({
      next: onNextResult,
      error: onError
    });
  }
  function onNextResult(fetchResult) {
    result.value = fetchResult.data;
    loading.value = false;
    resultEvent.trigger(fetchResult);
  }
  function onError(fetchError) {
    error.value = fetchError;
    loading.value = false;
    errorEvent.trigger(fetchError);
  }
  function stop() {
    if (!started)
      return;
    started = false;
    loading.value = false;
    if (subscription.value) {
      subscription.value = null;
    }
    if (observer) {
      observer.unsubscribe();
      observer = null;
    }
  }
  var restarting = false;
  function baseRestart() {
    if (!started || restarting)
      return;
    restarting = true;
    nextTick(function() {
      if (started) {
        stop();
        start();
      }
      restarting = false;
    });
  }
  var debouncedRestart;
  function updateRestartFn() {
    if (currentOptions.value.throttle) {
      debouncedRestart = throttle(currentOptions.value.throttle, baseRestart);
    } else if (currentOptions.value.debounce) {
      debouncedRestart = debounce(currentOptions.value.debounce, baseRestart);
    } else {
      debouncedRestart = baseRestart;
    }
  }
  function restart() {
    if (!debouncedRestart)
      updateRestartFn();
    debouncedRestart();
  }
  var currentOptions = ref();
  watch(function() {
    return isRef(optionsRef) ? optionsRef.value : optionsRef;
  }, function(value) {
    if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) {
      updateRestartFn();
    }
    currentOptions.value = value;
    restart();
  }, {
    deep: true,
    immediate: true
  });
  var currentDocument;
  watch(documentRef, function(value) {
    currentDocument = value;
    restart();
  }, {
    immediate: true
  });
  var currentVariables;
  var currentVariablesSerialized;
  watch(variablesRef, function(value, oldValue) {
    var serialized = JSON.stringify(value);
    if (serialized !== currentVariablesSerialized) {
      currentVariables = value;
      restart();
    }
    currentVariablesSerialized = serialized;
  }, {
    deep: true,
    immediate: true
  });
  var enabledOption = computed(function() {
    return !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled;
  });
  var isEnabled = enabledOption;
  watch(isEnabled, function(value) {
    if (value) {
      start();
    } else {
      stop();
    }
  }, {
    immediate: true
  });
  onBeforeUnmount(stop);
  return {
    result,
    loading,
    error,
    // @TODO doesn't fully work yet
    // enabled,
    start,
    stop,
    restart,
    document: documentRef,
    variables: variablesRef,
    options: optionsRef,
    subscription,
    onResult: resultEvent.on,
    onError: errorEvent.on
  };
}

// node_modules/@vue/apollo-composable/dist/useResult.js
function useResult(result, defaultValue, pick) {
  return computed(function() {
    var value = result.value;
    if (value) {
      if (pick) {
        try {
          return pick(value);
        } catch (e) {
        }
      } else {
        var keys = Object.keys(value);
        if (keys.length === 1) {
          return value[keys[0]];
        } else {
          return value;
        }
      }
    }
    return defaultValue;
  });
}

// node_modules/@vue/apollo-composable/dist/useLoading.js
function useQueryLoading() {
  var tracking = getCurrentTracking().tracking;
  return computed(function() {
    return tracking.queries.value > 0;
  });
}
function useMutationLoading() {
  var tracking = getCurrentTracking().tracking;
  return computed(function() {
    return tracking.mutations.value > 0;
  });
}
function useSubscriptionLoading() {
  var tracking = getCurrentTracking().tracking;
  return computed(function() {
    return tracking.subscriptions.value > 0;
  });
}
function useGlobalQueryLoading() {
  var appTracking = getAppTracking().appTracking;
  return computed(function() {
    return appTracking.queries.value > 0;
  });
}
function useGlobalMutationLoading() {
  var appTracking = getAppTracking().appTracking;
  return computed(function() {
    return appTracking.mutations.value > 0;
  });
}
function useGlobalSubscriptionLoading() {
  var appTracking = getAppTracking().appTracking;
  return computed(function() {
    return appTracking.subscriptions.value > 0;
  });
}
export {
  ApolloClients,
  DefaultApolloClient,
  provideApolloClient,
  useApolloClient,
  useGlobalMutationLoading,
  useGlobalQueryLoading,
  useGlobalSubscriptionLoading,
  useLazyQuery,
  useMutation,
  useMutationLoading,
  useQuery,
  useQueryLoading,
  useResult,
  useSubscription,
  useSubscriptionLoading
};
//# sourceMappingURL=@vue_apollo-composable.js.map
